<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://olimiya.github.io/</id><title>Olimi</title><subtitle>Olimi 的个人博客</subtitle> <updated>2022-11-19T18:42:39+08:00</updated> <author> <name>Olimi</name> <uri>https://olimiya.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://olimiya.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://olimiya.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 Olimi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>命令行总结-Windows包管理器</title><link href="https://olimiya.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%80%BB%E7%BB%93-Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" rel="alternate" type="text/html" title="命令行总结-Windows包管理器" /><published>2022-11-18T20:46:25+08:00</published> <updated>2022-11-19T18:34:29+08:00</updated> <id>https://olimiya.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%80%BB%E7%BB%93-Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id> <content src="https://olimiya.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%80%BB%E7%BB%93-Windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" /> <author> <name>Olimi</name> </author> <category term="杂记" /> <category term="windows" /> <summary> 前言 前段时间搞Powershell在windows终端上支持一些常用的Linux命令使用了Cygwin，然后最近安装Ruby又必须提供MSYS2 and MINGW development tool chain. 最后就是xxx install xx_package这样的命令都不支持用了多少种。因此把windows上命令行相关包管理器等一起汇总总结以下。 稍微吐槽以下：标准真的是个好东西，就像一种秩序，无论是多么糟糕的秩序，都比混乱强。因为Windows没有标准的命令行管理器（像ubuntu自带的apt、CentOS的yum等），就导致同样一个东西，百花齐放，分别维护，不同的东西喜欢依赖不同的工具。但对于用户来说这一堆东西并不感兴趣，能够提供一套一样的接口就好了。同理C++标准也是一样的。浅显的体会。 越总结越发现依赖管理对于一个编程技术发展的重要性~ 命令行学习 虽然动... </summary> </entry> <entry><title>旧配置笔记本更新windows11 Cpu不兼容</title><link href="https://olimiya.github.io/posts/%E6%97%A7%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%96%B0Windows11-CPU%E4%B8%8D%E5%85%BC%E5%AE%B9/" rel="alternate" type="text/html" title="旧配置笔记本更新windows11 Cpu不兼容" /><published>2022-11-13T00:00:00+08:00</published> <updated>2022-11-13T22:28:42+08:00</updated> <id>https://olimiya.github.io/posts/%E6%97%A7%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%96%B0Windows11-CPU%E4%B8%8D%E5%85%BC%E5%AE%B9/</id> <content src="https://olimiya.github.io/posts/%E6%97%A7%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%9B%B4%E6%96%B0Windows11-CPU%E4%B8%8D%E5%85%BC%E5%AE%B9/" /> <author> <name>Olimi</name> </author> <summary> 前言 之前一直不想更新win11，一个是觉得没太大必要，看起来不过是换皮罢了，另外是更新之处留下的恶劣印象，比如崩溃比较多，比如对A卡的恶劣态度。如今时间已经过去了快两年，迭代更新也很多版了，而且就算只是换皮，想想写的其他博客，不就是爱好为了这点效果折腾这样的人嘛。所以搞起，拥抱新变化。 更新过程 先放下最终成功和测试的配置： 设备名称 Olimi-PC 处理器 Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz 2.50 GHz 机带 RAM 16.0 GB (15.9 GB 可用) 设备 ID 19BD7F44-7786-40A6-B087-3E10BB8261B1 产品 ID 00331-10000-00001-AA806 系统类型 64 位操作系统, 基于 x64 的处理器 笔和触控 没有可用于此显示器的笔或触控输入 版本 Wi... </summary> </entry> <entry><title>C++包管理器</title><link href="https://olimiya.github.io/posts/C++%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" rel="alternate" type="text/html" title="C++包管理器" /><published>2022-11-08T20:18:43+08:00</published> <updated>2022-11-08T20:18:43+08:00</updated> <id>https://olimiya.github.io/posts/C++%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id> <content src="https://olimiya.github.io/posts/C++%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" /> <author> <name>Olimi</name> </author> <category term="杂记" /> <category term="C++" /> <summary> CPP包管理器 可选择如下。尝试通过包管理器简单完成项目依赖管理和编译工作。参考：打包一沓开源的 C/C++ 包管理工具送给你! - 削微寒 - 博客园 Vcpkg Conan：一个好东西中文博客 xrepo Conan 个人体感仅开发windows应用用vcpkg，对于跨平台或者cmake项目首选Conan。搜索了一些基础库后发现conan包更齐，所以先用Conan. 安装 参考文档：Install — conan 1.53.0 documentation $ pip install conan 这里有个问题： We strongly recommend using virtualenvs (virtualenvwrapper works great) for everything ... </summary> </entry> <entry><title>个人云服务器指南</title><link href="https://olimiya.github.io/posts/%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%87%E5%8D%97/" rel="alternate" type="text/html" title="个人云服务器指南" /><published>2022-11-01T17:34:02+08:00</published> <updated>2022-11-15T10:22:53+08:00</updated> <id>https://olimiya.github.io/posts/%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%87%E5%8D%97/</id> <content src="https://olimiya.github.io/posts/%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%87%E5%8D%97/" /> <author> <name>Olimi</name> </author> <category term="教程" /> <summary> 前言 C++搞不知道有什么用的单机软件无聊死了，还是互联网好玩。（不过学C++跟搞互联网的都一起饿死了）简单记录一下简简单单的入门知识吧。 选购 国内和国外，但国外的还是会有支付银行卡的问题。 那国内基本就阿里、华为、腾讯，还有别的一些小厂。体感跟看别人的说法，阿里做的最好，市场份额也最高。华为性价比还行，印象中感觉主要还是to G或者to B。腾讯云最low（身边有朋友还被黑了）。不过阿里云已经给实验室买了两个账户，没有新用户了。只能试试腾讯云了。选购链接： 阿里云：云小站_专享特惠_云产品推荐-阿里云 (aliyun.com) 华为云：特惠专区_云服务器_云主机_企业上云-华为云 (huaweicloud.com) 腾讯云：精选爆品抢购_云服务器秒杀_企业上云场景推荐-腾讯云 (tencent.com) 个人开发者嘛，就一个字抠。所以嘛，搞公有云的也不... </summary> </entry> <entry><title>C++新项目学习-逆向工程之使用Doxygen</title><link href="https://olimiya.github.io/posts/C++%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B9%8B%E4%BD%BF%E7%94%A8Doxygen/" rel="alternate" type="text/html" title="C++新项目学习-逆向工程之使用Doxygen" /><published>2022-07-28T16:01:09+08:00</published> <updated>2022-07-28T16:06:18+08:00</updated> <id>https://olimiya.github.io/posts/C++%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B9%8B%E4%BD%BF%E7%94%A8Doxygen/</id> <content src="https://olimiya.github.io/posts/C++%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B9%8B%E4%BD%BF%E7%94%A8Doxygen/" /> <author> <name>Olimi</name> </author> <category term="杂记" /> <category term="C++" /> <summary> 前言 学习C++项目，无论是调用的C++库，亦或者查看一个别人的项目，再或者接手一个老项目（shishan），直接硬撸源码是不太现实的。有些库文档写得不好，看文档不如直接看源码了。这个时候，如果我们手上已经有了源码，那使用逆向工程生成一些比较适合阅读的输出文档、图表就是一个自然而然的念头。对于C++来说，doxygen应该是个较为通用的解决方案。 汇总 doxygen visual paradigm rational rose start uml visual paradigm: How to generate UML from C++ - Visual Paradigm (visual-paradigm.com) doxygen: Doxygen + Graphviz + Htmlhelp, 成为文档好手 - maxweii - 博客园 (cnblog... </summary> </entry> </feed>
